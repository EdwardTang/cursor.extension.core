syntax = "proto3";

package oppie.relay;

option go_package = "github.com/oppiexyz/cloud-relay/proto";

// 导入标准Protobuf时间戳类型
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// 主服务定义
service RelayService {
  // 会话相关RPC
  rpc CreateSession(CreateSessionRequest) returns (SessionResponse);
  rpc CloseSession(SessionIdRequest) returns (google.protobuf.Empty);
  rpc GetSessionStatus(SessionIdRequest) returns (SessionStatusResponse);
  rpc ListActiveSessions(ListSessionsRequest) returns (ListSessionsResponse);

  // 消息传递RPC (主要用于REST API, WebSocket另行处理)
  rpc SendMessage(Message) returns (MessageAck);
  rpc GetMessages(GetMessagesRequest) returns (stream Message);
}

// 会话管理
message CreateSessionRequest {
  string device_id = 1;
  string device_name = 2;
  string user_id = 3;
  DeviceType device_type = 4;
}

message SessionIdRequest {
  string session_id = 1;
}

message SessionResponse {
  string session_id = 1;
  string ws_url = 2; // WebSocket连接URL
  string auth_token = 3; // 临时会话令牌
  google.protobuf.Timestamp expires_at = 4;
}

message SessionStatusResponse {
  string session_id = 1;
  SessionState state = 2;
  DeviceInfo device = 3;
  UserInfo user = 4;
  google.protobuf.Timestamp connected_at = 5;
  google.protobuf.Timestamp last_activity = 6;
  int64 messages_sent = 7;
  int64 messages_received = 8;
}

message ListSessionsRequest {
  string user_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  bool include_inactive = 4;
}

message ListSessionsResponse {
  repeated SessionStatusResponse sessions = 1;
  int32 total_count = 2;
}

// 消息传递
message Message {
  string id = 1;
  string session_id = 2;
  string type = 3;
  google.protobuf.Timestamp timestamp = 4;
  bytes payload = 5; // 可以是JSON或二进制数据
  MessageMetadata metadata = 6;
}

message MessageMetadata {
  string device_id = 1;
  string session_id = 2;
  int32 priority = 3;
  google.protobuf.Timestamp expires_at = 4;
  string correlation_id = 5;
}

message MessageAck {
  string message_id = 1;
  MessageStatus status = 2;
  string error_message = 3;
}

message GetMessagesRequest {
  string session_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  string type = 4;
  google.protobuf.Timestamp since = 5;
}

// 设备信息
message DeviceInfo {
  string id = 1;
  string name = 2;
  DeviceType type = 3;
  string platform = 4; // os, version, etc.
  string client_version = 5;
}

// 用户信息
message UserInfo {
  string id = 1;
  string email = 2;
  string name = 3;
}

// 状态和类型定义
enum SessionState {
  SESSION_UNKNOWN = 0;
  SESSION_CONNECTING = 1;
  SESSION_ACTIVE = 2;
  SESSION_IDLE = 3;
  SESSION_DISCONNECTED = 4;
  SESSION_EXPIRED = 5;
}

enum DeviceType {
  DEVICE_UNKNOWN = 0;
  DEVICE_MOBILE = 1;
  DEVICE_DESKTOP = 2;
  DEVICE_WEB = 3;
  DEVICE_VSCODE_EXTENSION = 4;
}

enum MessageStatus {
  MESSAGE_UNKNOWN = 0;
  MESSAGE_DELIVERED = 1;
  MESSAGE_PENDING = 2;
  MESSAGE_FAILED = 3;
  MESSAGE_EXPIRED = 4;
}

// WebSocket事件消息定义 (这些是通过WebSocket传递的，不通过gRPC)
// 这里定义为参考，实际使用JSON格式

// 计划执行
message RunPlanEvent {
  string plan_id = 1;
  string title = 2;
  string description = 3;
  repeated PlanStep steps = 4;
  map<string, string> parameters = 5;
}

message PlanStep {
  string id = 1;
  string action = 2;
  map<string, string> params = 3;
  bool is_checkpoint = 4;
}

// 聊天消息
message ChatEvent {
  string prompt = 1;
  map<string, string> context = 2;
}

// 进度更新
message ProgressEvent {
  string plan_id = 1;
  float percentage = 2;
  string step_id = 3;
  string log = 4;
  ProgressState state = 5;
}

enum ProgressState {
  PROGRESS_UNKNOWN = 0;
  PROGRESS_RUNNING = 1;
  PROGRESS_PAUSED = 2;
  PROGRESS_COMPLETED = 3;
  PROGRESS_FAILED = 4;
}

// 代码差异
message DiffEvent {
  string plan_id = 1;
  string step_id = 2;
  string file_path = 3;
  string patch = 4;
  bool requires_approval = 5;
}

// 恢复操作
message RecoveryEvent {
  string reason = 1;
  bool success = 2;
  int64 latency_ms = 3;
  string context_hash = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// 操作批准
message ApproveEvent {
  string plan_id = 1;
  string step_id = 2;
  bool approved = 3;
  string comment = 4;
} 