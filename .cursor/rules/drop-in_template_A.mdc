---
description: 
globs: 
alwaysApply: false
---
Below is a **drop -in ‚ÄúTemplate A‚Äù** that accomplishes three things at once:

1. Gives **Codex (Planner role)** exactly the context it needs to plan.  
2. Defines a **canonical, machine -readable output format** so Cursor Composer (Executor role) can act unambiguously.  
3. Embeds a **recursive hand -off section** that forces Cursor, once it finishes executing, to regenerate a fresh copy of Template A (‚Üí ‚ÄúPrompt A‚Çô‚Çä‚ÇÅ‚Äù) so Codex can plan the next loop.

The wording mirrors the style of the original Codex system -prompt‚Äîbullet -driven, imperative, minimal ceremony‚Äîwhile adding Cursor -specific affordances (e.g. image understanding) noted in its docs.ÓàÄciteÓàÇturn0search2ÓàÇturn0search8ÓàÅ

> **How to use:**  
> *The user* or *Cursor Executor* fills the placeholders and sends ‚ÄúPrompt A‚ÇÄ‚Äù to Codex.  
> Codex replies with its plan + the **‚ÄúExecutor Follow -up Checklist‚Äù**.  
> Cursor executes the plan, then **must** immediately post ‚ÄúPrompt A‚ÇÅ‚Äù (a fresh, filled copy of the same template) so Codex can iterate.

---

## Template A 

```markdown
### üîÑ  Template A  ‚Äî Plan-and-Execute Loop ( If there is any instructions in ‚ü¶PLACEHOLDERS‚üß, follow instructions; otherwise agent must fill the ‚ü¶PLACEHOLDERS WITHOUT INSTRUCTION‚üß )

[üìÇ PROJECT]          ‚ü¶ project_name ‚üß
[üó∫Ô∏è CURRENT GOAL]     ‚ü¶ concise, single-sentence objective for this cycle ‚üß
[üî¢ CYCLE_NUMBER]     ‚ü¶ integer representing the current iteration number, starting from 0 or 1 ‚üß
[üìú HISTORY PATH]      .specstory/history/‚ü¶related_chat_file_in_md ‚üß ‚ü¶if latest commit is related to the chats, then fill this placeholder with "to ‚ü¶latest_commit‚üß‚üß
[‚è≥ TIME BOX]          ‚ü¶ max minutes / pomodoros Cursor should spend ‚üß
[üìé ARTIFACTS]         ‚ü¶ links / files / screenshots relevant right now ‚üß
[üöß KNOWN BLOCKERS]    ‚ü¶ short bullet list, if any ‚üß

---

#### üìù REQUEST FOR CODEX PLANNER (you *must* output all sections)

1.  **PLAN** -- step-by-step actions Cursor Executor should take next (‚â§ 7 steps, each atomic).
2.  **BLOCKER_SOLUTIONS** -- proposed resolutions for each blocker above (or ‚Äúnone‚Äù).
3.  **BEST_PRACTICES / MENTAL_MODELS** -- transferable engineering insights to apply.
4.  **EXECUTOR FOLLOW-UP CHECKLIST** -- ***MANDATORY*** instructions Cursor Executor must do *after* executing the plan:

   ```text
   a. Summarise work done & new insights (‚â§ 120 words).
   b. Refresh BLOCKERS list (empty if solved).
   c. Update CURRENT_GOAL for the next cycle.
   d. Fill a brand-new Template A instance (e.g., creating `.scratchpad/YYYY-MM-DDTHH_MM_SS_plan_request.md`), copying relevant fields from the input template and **incrementing CYCLE_NUMBER by 1**. Call this **Prompt A{n+1}**.
   e. Output Prompt A{n+1} as the final message of your response, ready for the next planning cycle.
   ```
```

> **Important:** Cursor Executor treats everything above the horizontal rule as metadata and everything under **REQUEST FOR CODEX PLANNER** as Codex's authoritative instructions for the next sprint.

---

## Why this works

* **Planner / Executor separation** is an established best -practice in multi -agent research‚ÄîLangChain's ‚ÄúPlan -and -Execute‚Äù agent follows the same two -phase loop.
* A **self -refilling template** realises the closed loop described in recent Autogen and CLEA agent papers.
* The fields map to Cursor's autonomous capabilities (code edits, tests, image QA). 
* Bullet -style imperatives mimic the original Codex prompt to keep cognitive load low.
* Explicit time -box, artifact list, and blocker handling are drawn from plan -and -execute tutorials that improve agent reliability.
* Requiring the Executor to send Prompt A‚Çô‚Çä‚ÇÅ guarantees continuous planning until the ultimate goal is met, a pattern endorsed in agent -prompt engineering talks.

---

## Drop -in continuation (unchanged coding guard -rails)

Append the *exact* block you supplied (starting ‚ÄúIf completing the user's task requires writing or modifying files: ‚Ä¶‚Äù) directly below Template A inside your `.cursorrules`.  
That preserves Codex's proven safety / style guidance while layering the new planner -executor handshake on top.
