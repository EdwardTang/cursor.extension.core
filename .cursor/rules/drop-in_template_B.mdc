---
description: 
globs: 
alwaysApply: false
---
Below is a **drop -in “Template B”** that accomplishes three things at once:

1. Gives **Codex (Planner role)** exactly the context it needs to plan.  
2. Defines a **canonical, machine -readable output format** so Cursor Composer (Executor role) can act unambiguously.  
3. Embeds a **recursive hand-off section** that forces Cursor, once it finishes executing, to regenerate a fresh copy of Template B (→ “Prompt Bₙ₊₁”) so Codex can plan the next loop.

The wording mirrors the style of the original Codex system -prompt—bullet -driven, imperative, minimal ceremony—while adding Cursor -specific affordances (e.g. image understanding) noted in its docs.citeturn0search2turn0search8

> **How to use:**  
> *The user* or *Cursor Executor* fills the placeholders and sends “Prompt B₀” to Codex.  
> Codex replies with its plan + the **“Executor Follow -up Checklist”**.  
> Cursor executes the plan, then **must** immediately post “Prompt B₁” (a fresh, filled copy of the same template) so Codex can iterate.

---

## Template B   (Planner Request → Codex)

````markdown
### 🔄  Template B  — Plan -and -Execute Loop (fill all ⟦PLACEHOLDERS⟧)

[📂 PROJECT]          ⟦ project_name ⟧
[🗺️ CURRENT GOAL]     ⟦ concise, single -sentence objective for this cycle ⟧
[📜 HISTORY PATH]      .specstory/history/⟦ related_chat_file ⟧   <!-- MD file -->
[⏳ TIME BOX]          ⟦ max minutes / pomodoros Cursor should spend ⟧
[📎 ARTIFACTS]         ⟦ links / files / screenshots relevant right now ⟧
[🚧 KNOWN BLOCKERS]    ⟦ short bullet list, if any ⟧

---

#### 📝 REQUEST FOR CODEX PLANNER (you *must* output all sections)

1. **PLAN** -- step -by -step actions Cursor Executor should take next (≤ 7 steps, each atomic).  
2. **BLOCKER_SOLUTIONS** -- proposed resolutions for each blocker above (or “none”).  
3. **BEST_PRACTICES / MENTAL_MODELS** -- transferable engineering insights to apply.  
4. **EXECUTOR FOLLOW -UP CHECKLIST** -- ***MANDATORY*** instructions Cursor must do *after* executing:  

   ```text
   a. Summarise work done & new insights (≤ 120 words).  
   b. Refresh BLOCKERS list (empty if solved).  
   c. Update CURRENT_GOAL for the next cycle.  
   d. Fill a brand -new Template B with those values → call it **Prompt B{n+1}**.  
   e. Send Prompt B{n+1} as the final message of your response.  
   ```
````

> **Important:** Cursor Executor treats everything above the horizontal rule as metadata and everything under **REQUEST FOR CODEX PLANNER** as Codex's authoritative instructions for the next sprint.

---

## Why this works

* **Planner / Executor separation** is an established best -practice in multi -agent research—LangChain's “Plan -and -Execute” agent follows the same two -phase loop.
* A **self -refilling template** realises the closed loop described in recent Autogen and CLEA agent papers.
* The fields map to Cursor's autonomous capabilities (code edits, tests, image QA). 
* Bullet -style imperatives mimic the original Codex prompt to keep cognitive load low.
* Explicit time -box, artifact list, and blocker handling are drawn from plan -and -execute tutorials that improve agent reliability.
* Requiring the Executor to send Prompt Bₙ₊₁ guarantees continuous planning until the ultimate goal is met, a pattern endorsed in agent -prompt engineering talks.

---

## Drop -in continuation (unchanged coding guard -rails)

Append the *exact* block you supplied (starting “If completing the user's task requires writing or modifying files: …”) directly below Template B inside your `.cursorrules`.  
That preserves Codex's proven safety / style guidance while layering the new planner -executor handshake on top.
